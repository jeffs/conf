# VARIABLES

CASE_SENSITIVE=true
COMPLETION_WAITING_DOTS=true
DISABLE_AUTO_TITLE=true
DISABLE_UNTRACKED_FILES_DIRTY=true

# Use precmd to format a nice separator for use in a colorized PROMPT.
#
# TODO: Replace with Rust, or teach VS Code shell-format extension about Zsh.
typeset -H prompt_bar
PROMPT=$'\n%{$fg[cyan]%}(%h) $(hostname):$prompt_bar\n$%{$reset_color%} '
precmd() {
    local d=$(dirs -p | head -1)
    local -i n=$(($COLUMNS - ${#d} - ${#$(hostname)} - 10))
    prompt_bar="$d $(printf 'â”€%.0s' $(=/usr/bin/seq $n))"
}

# PLUGINS

# Note that zsh-syntax-highlighting must be the last plugin sourced.
# https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md
plugins=(
    poetry
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

eval "$(pyenv init -)"

# OPTIONS

setopt rmstarsilent	# Don't confirm rm *.

unsetopt autocd
unsetopt auto_pushd
unsetopt correct_all
unsetopt hist_verify
unsetopt share_history

zstyle ':completion:*' matcher-list ''

# Complete filenames after =, as in --someflag=.  Copied from:
# https://unix.stackexchange.com/a/599449/49952
autoload +X -U _default
functions[_default]="setopt local_options magic_equal_subst; $functions[_default]"

# https://python-poetry.org/docs/
fpath+=~/.zfunc
autoload -Uz compinit && compinit

# ALIASES

unalias l la

alias clippy='cargo clippy --tests && cargo clippy -- -W clippy::pedantic'
alias vim=nvim
alias rust='evcxr -q' # Rust REPL
alias h=history
alias hd='hexdump -C'
alias u='c ..'
alias uu='c ../..'
alias uuu='c ../../..'
alias py='python -q'
alias tf=terraform
alias up=gitup
alias z=zellij

## Tree

alias tree='eza --group-directories-first --tree --ignore-glob="__pycache__|dist|node_modules|target"'
alias t='tree --git-ignore'

# Show directory tree to a specified depth.
for i in $(seq 9); do alias t$i="t -L$i"; done

## Git

alias g=git
for s in br ci clone co di flog glog glog4 push push-f show st stash; do alias $s="git $s"; done
alias pull='git pull --prune'
if [[ "$TERM_PROGRAM" == vscode ]]; then
    # Prefix matches with `file:lineno:` so I can click to open.
    alias rg='rg --no-heading'
fi

alias yolo='ci -a --amend --no-edit --no-verify && push -f'

# FUNCTIONS

# Strip comment leaders from copy/pasted sample code.
function $ { "$@" }
function // { "$@" }

c() { cd "$@" && ls; }
cg() { c $(git rev-parse --show-toplevel); }
cy() { cl --yesterday; }
mc() { mkdir -p $1 && c $1; }

l() { ls -hl --color "$@" | $PAGER }
la() { ls -Ahl --color "$@" | $PAGER }

e() {
    if [[ -d .git ]]; then
        # Remove `a/' and `/b` prefixes (used in git diff output) from args.
        setopt local_options histsubstpattern
        ${EDITOR:-vi} "${@:s,[ab]/,}"
    else
        ${EDITOR:-vi} "$@"
    fi
}

function re { cargo eval --expr "$*"; }

# This is the nuclear option: Forward args to a binary, and eval its output.
# Ultimately, I expect most of my commands to be binaries, rather than shell
# functions or aliases; however, "eval" wrappers should not be necessary except
# to change the state of the shell itself.  Such changes include:
#
# * Changing the shell's working directory.
# * Setting shell or environment variables.
function j { eval $(jump -c "$@"); }

# TODO: Unify since and gitup into a single 'grit' tool.
si() {
    if test $# = 0 && git show-ref -q dev; then
        since dev
    else
        since "$@"
    fi
}

grit () {
    case $1; in
        up|update) gitup "${@[@]:2}" ;;
        si|since) si "${@[@]:2}" ;;
    esac
}

source ~/conf/etc/init-node.zsh

eza() {
    if ! /usr/bin/which eza; then
        cargo install eza
    fi
    unset -f eza
    eza "$@"
}

# Open a man page in Vim.
Man() { vim +":Man $1 | only"; }

function poetry-activate {
    readonly env_path="$(poetry env info --path)"
    if [[ -z "$VIRTUAL_ENV" ]]; then
        # No venv was already active.
        source "$env_path/bin/activate"
    elif [[ "$VIRTUAL_ENV" != "$env_path" ]]; then
        # A different venv was already active.
        deactivate
        source "$env_path/bin/activate"
    else
        # This very venv was already active.
    fi
}


# BINDINGS

if [ -d ~/opt/fzf ]; then
    source ~/opt/fzf/shell/completion.zsh 2>/dev/null
    source ~/opt/fzf/shell/key-bindings.zsh
fi

# https://github.com/ohmyzsh/ohmyzsh/issues/5071
bindkey '^[l' down-case-word

# Stolen by FZF.  Steal it back.
bindkey '^[c' capitalize-word

# Terraform
# https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform

# PROFILES
#
# Extensions and overrides for specific projects.  Checking out different
# profiles on different laptops allows customization for home, work, etc.

for conf_module in ~/git/conf-*(N); do
    if [ -r $conf_module/etc/zshrc ]; then
        source $conf_module/etc/zshrc
    fi
done
